---
import { type CollectionEntry, getCollection, render } from "astro:content";
import NoteLayout from "@/layouts/NoteLayout.astro";
import CompletionBadge from "@/components/CompletionBadge.astro";
import TagBadge from "@/components/TagBadge.astro";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import { trimRelPath, toSlug } from "@/utils/slug";

export async function getStaticPaths() {
  const entries = await getCollection("notes");

  return entries.map((note) => {
    const path =
      trimRelPath(note.filePath) ??
      note.id;
    return {
      params: { slug: toSlug(path) },
      props: { note, path },
    };
  });
}

type Props = {
  note: CollectionEntry<"notes">;
  path: string;
};

const { note, path } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(note);
---

<NoteLayout>
  <div class="flex-1 max-w-5xl overflow-y-auto mb-150">
    {/* Title */}
    <div class="px-6 mb-4">
      <Breadcrumbs path={path} isFolder={false} />
      <h1 class="text-4xl font-bold tracking-tight">
        {remarkPluginFrontmatter.title}
      </h1>
      <div class="mt-2 flex flex-col gap-4 text-sm text-muted-foreground">
        <CompletionBadge completion={note.data.complete} />
        {
          note.data.tags.length > 0 && (
            <div class="flex flex-wrap items-center gap-2">
              {note.data.tags.map((tag) => (
                <TagBadge tag={tag} />
              ))}
            </div>
          )
        }
      </div>
    </div>
    <hr />
    {/* Main Content */}
    <div class="flex flex-col wrap-break-word gap-3 px-6 mt-4">
      <Content />
    </div>
  </div>
</NoteLayout>
