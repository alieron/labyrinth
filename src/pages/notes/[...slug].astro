---
import { type CollectionEntry, getCollection, render } from "astro:content";
import NoteLayout from "@/layouts/NoteLayout.astro";
import CompletionBadge from "@/components/CompletionBadge.astro";
import TagBadge from "@/components/TagBadge.astro";
import NoteBreadcrumbs from "@/components/NoteBreadcrumbs.astro";
import { trimRelPath, toSlug } from "@/utils/slug";

export async function getStaticPaths() {
  const entries = await getCollection("notes");

  return entries.map((note) => {
    const path = trimRelPath(note.filePath) ?? note.id;
    return {
      params: { slug: toSlug(path) },
      props: { note, path },
    };
  });
}

type Props = {
  note: CollectionEntry<"notes">;
  path: string;
};

const { note, path } = Astro.props;
const { Content, remarkPluginFrontmatter } = await render(note);
---

<NoteLayout
  title={remarkPluginFrontmatter.title}
  prev={remarkPluginFrontmatter.prev}
  next={remarkPluginFrontmatter.next}
>
  {/* Title */}
  <div class="px-4 mb-4">
    <NoteBreadcrumbs path={path} isFolder={false} />
    <div class="flex items-center gap-4 w-full">
      <div class="min-w-0 shrink">
        <h1
          class="text-4xl font-bold tracking-tight truncate whitespace-nowrap"
        >
          {remarkPluginFrontmatter.title}
        </h1>
      </div>
      <div class="flex-none">
        <CompletionBadge completion={note.data.complete} />
      </div>
    </div>
    <div class="mt-2 text-base text-muted-foreground">
      {
        note.data.tags.length > 0 && (
          <div class="flex flex-wrap items-center gap-2">
            {note.data.tags.map((tag) => (
              <TagBadge tag={tag} />
            ))}
          </div>
        )
      }
    </div>
  </div>
  <hr />
  {/* Main Content */}
  <div class="flex flex-col wrap-break-word gap-4 px-4 mt-4">
    <Content />
  </div>
</NoteLayout>
