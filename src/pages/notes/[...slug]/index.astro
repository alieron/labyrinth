---
import { getCollection } from "astro:content";
import { File, Folder, Minus } from "lucide-react";
import Layout from "@/layouts/Layout.astro";
import CompletionBadge from "@/components/CompletionBadge.astro";
import TagBadge from "@/components/TagBadge.astro";
import NoteBreadcrumbs from "@/components/NoteBreadcrumbs.astro";
import { trimRelPath, toSlug } from "@/utils/slug";
import { resolveBase } from "@/utils/resolve";

export async function getStaticPaths() {
  const notes = await getCollection("notes");
  const folders = new Set<string>([""]); // add the root page

  for (const note of notes) {
    const parts = (trimRelPath(note.filePath) ?? note.id).split("/");
    for (let i = 1; i < parts.length; i++) {
      const folder = parts.slice(0, i).join("/");
      folders.add(folder);
    }
  }

  return Array.from(folders).map((folderPath) => ({
    params: { slug: toSlug(`${folderPath}/`) },
    props: { path: folderPath },
  }));
}

type Props = {
  path: string;
};

const { path } = Astro.props;
const splitPath = path === "" ? [] : path?.split("/");

const notes = await getCollection("notes");

// Notes directly inside the current folder
const currentNotes = notes.filter((note) => {
  const parts = (trimRelPath(note.filePath) ?? note.id).split("/");
  return parts.slice(0, -1).join("/") === path;
});

// Immediate subfolders inside the current folder
const subfolders = new Set<string>();
for (const note of notes) {
  const parts = (trimRelPath(note.filePath) ?? note.id).split("/");
  if (
    parts.length > splitPath.length + 1 &&
    parts.slice(0, splitPath.length).join("/") === path
  ) {
    subfolders.add(parts[splitPath.length]);
  }
}

type folderEntry = {
  type: "folder";
  name: string;
  href: string;
};
type noteEntry = {
  type: "note";
  name: string;
  href: string;
  tags: string[];
  complete: boolean;
};

// Notes in current or nested folders
const items: (folderEntry | noteEntry)[] = [
  ...Array.from(subfolders)
    .map(
      (name) =>
        ({
          type: "folder",
          name,
          href: toSlug(`/notes/${[...splitPath, name].join("/")}/`),
        }) as folderEntry,
    )
    .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),
  ...currentNotes
    .map((note) => {
      const path = trimRelPath(note.filePath) ?? note.id;
      return {
        type: "note",
        name: path.split("/").pop(),
        href: `/notes/${toSlug(path)}`,
        tags: note.data.tags || [],
        complete: note.data.complete,
      } as noteEntry;
    })
    .sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase())),
];
---

<Layout>
  <div class="flex-1 max-w-5xl overflow-y-auto mx-auto">
    <div class="px-6 mb-4">
      <NoteBreadcrumbs path={path} isFolder={true} />
      <div class="rounded-md border">
        <table class="table-fixed border-collapse w-full">
          <thead>
            <tr class="text-left">
              <th class="py-2 px-4 w-1/5">Name</th>
              <th class="py-2 px-4 w-3/5">Tags</th>
              <th class="py-2 px-4 w-1/5">Complete</th>
            </tr>
          </thead>
          <tbody>
            {
              items.map((item) => (
                <tr class="border-t">
                  <td class="py-2 px-4">
                    <div class="flex flex-row items-center gap-2">
                      {item.type === "folder" ? (
                        <Folder className="flex-none w-4" />
                      ) : (
                        <File className="flex-none w-4" />
                      )}
                      <a
                        href={resolveBase(item.href)}
                        class="text-nowrap overflow-hidden text-ellipsis text-ellipsis hover:text-primary"
                      >
                        {item.name}
                      </a>
                    </div>
                  </td>
                  <td class="pt-2 px-4 overflow-hidden">
                    {item.type === "note" && (
                      <div class="flex flex-nowrap gap-1 pb-2 overflow-x-auto">
                        {item.tags.length > 0 ? (
                          item.tags.map((tag) => <TagBadge tag={tag} />)
                        ) : (
                          <Minus className="w-4" />
                        )}
                      </div>
                    )}
                  </td>
                  <td class="py-2 px-4">
                    {item.type === "note" && (
                      <CompletionBadge completion={item.complete} />
                    )}
                  </td>
                </tr>
              ))
            }
          </tbody>
        </table>
      </div>
    </div>
  </div>
</Layout>
